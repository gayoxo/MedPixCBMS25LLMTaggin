[
    {
        "text": "Stable cardiomegaly. Stable tortuosity of the aorta. No focal airspace opacities, pneumothorax or pleural effusion. Mild degenerative changes of the thoracic spine.",
        "res": "### Clinical Finding Extractor\n\n#### Requirements\n- Python 3.6+\n- `re` for regular expressions\n\n#### Usage\n```bash\npython clinical_findings.py jsonIni Text to analyze > output.json\n```\n#### Code\n```python\nimport re\n\ndef extract_findings(json_ini, text):\n    # Define clinically significant findings and diseases\n    findings = {\n        \"atelectasis\": (\"infiltrate\", \"infiltrates\"),\n        \"aortic atherosclerotic vascular calcification\": [\"calcified\", \"calcifications\"],\n        \"bronchiectasis\": (\"disease\", \"airspace opacities\"),\n        \"emphysema\": (\"disease\", \"airspace opacities\"),\n        \"hiatal hernia\": (\"hiatal\", \"hernia\"),\n        \"hyperinflated lungs\": (\"high\", \"inflation\")\n    }\n\n    # Extract relevant sections of the text\n    text_sections = re.split(r\"[.!?]\", text)\n    relevant_sections = [s for s in text_sections if any(findings.get(key, []) for key in findings)]\n\n    # Create a list to store extracted findings\n    result = []\n\n    # Iterate through each finding and its associated keywords\n    for finding, keywords in findings.items():\n        keyword_pattern = \"|\".join(re.escape(k) for k in keywords)\n        found_in_text = any(re.search(keyword_pattern, s) for s in relevant_sections)\n\n        # Check if the term is present or absent\n        if found_in_text:\n            result.append({\n                \"finding\": finding,\n                \"absent\": False,\n                \"text\": \"\".join(relevant_sections)\n            })\n        else:\n            result.append({\n                \"finding\": finding,\n                \"absent\": True,\n                \"text\": \"\".join(relevant_sections)\n            })\n\n    # Return the list of extracted findings\n    return result\n\n# Test the function\nimport json\nwith open('jsonIni.txt', 'r') as file:\n    data = json.load(file)\n\nprint(json.dumps(extract_findings(data, 'Stable cardiomegaly. Stable tortuosity of the aorta. No focal airspace opacities, pneumothorax or pleural effusion. Mild degenerative changes of the thoracic spine.'), indent=4))\n```\n\n#### Explanation\nThis script first defines a dictionary `findings` that maps clinically significant findings and diseases to their associated keywords.\n\nThen it extracts relevant sections from the text by splitting it into sentences and filtering out empty or non-relevant ones.\n\nNext, it iterates through each finding and its associated keywords, checking if any keyword is found in the relevant text section. If a keyword is found, the script adds an entry with \"absent\" set to `False`. Otherwise, it adds an entry with \"absent\" set to `True`.\n\nFinally, the script returns the list of extracted findings as a JSON array.\n\n#### Note\nThis script assumes that the input text only contains sentences separated by dots (`.`). If the text format is different, you may need to adjust the regular expression accordingly."
    },
    {
        "text": "Heart valve, mediastinum, Lymph nodes, bony structures and lung fields are unremarkable. Stable small calcified granuloma left base. No Pulmonary edema acute findings/opacities/infiltrates noted.",
        "res": "import json\nfrom typing import List, Dict\n\ndef analyze_clinical_findings(jsonIni: List[str], TextToAnalyze: str) -> List[Dict]:\n    # Remove general observations and anatomical descriptions from jsonIni\n    clinically_relevant_findings = [\n        finding for finding in jsonIni if \n            (finding.lower().find(\"unremarkable\") == -1 or \"absent findings\" not in finding)\n        ]\n    \n    # Extract relevant findings from TextToAnalyze\n    findings_in_text = []\n    parts = TextToAnalyze.split('.')\n    for part in parts:\n        part = part.strip()\n        if part and any(find in part for find in clinically_relevant_findings):\n            finding = next((find for find in jsonIni if find in part), None)\n            if finding:\n                findings_in_text.append({\n                    \"finding\": finding,\n                    \"absent\": part.lower() not in [f\"no {finding}\" for f in [find.lower().replace(\" \", \"\") for find in clinically_relevant_findings]],\n                    \"text\": part\n                })\n    \n    return findings_in_text\n\n# Example usage:\njsonIni = [\n    'Right paratracheal stripe is denser', \n    'XXXX opacities in the right mid lung', \n    'aortic atherosclerotic vascular calcification',\n    # ... other clinically relevant findings\n]\nTextToAnalyze = \"Heart valve, mediastinum, Lymph nodes, bony structures and lung fields are unremarkable. Stable small calcified granuloma left base. No Pulmonary edema acute findings/opacities/infiltrates noted.\"\n\nresult = analyze_clinical_findings(jsonIni, TextToAnalyze)\nprint(json.dumps(result, indent=4))"
    },
    {
        "text": "2 images. The cardiac silhouette is enlarged. Thoracic aortic atherosclerotic calcifications are present. There are findings status post sternotomy and CABG. Pulmonary atelectasis or scar is noted within the left midlung. There is blunting of the left costophrenic angle. No pneumothorax.",
        "res": "import re\nimport json\n\ndef extract_findings(text_to_analyze):\n    # Regular expression patterns to match clinically relevant findings and diseases\n    patterns = [\n        r'\\b(atelectasis|bronchiectasis|emphysema|hyperinflated lungs|increased retrosternal airspace|interstitial opacities|pulmonary edema|pulmonary edema due to acute respiratory distress syndrome|pulmonary edema due to acute respiratory distress syndrome (ARDS)|patchy left lower lobe airspace disease)\\b',\n        r'\\b(aminoglutethimide|naltrexone|spine dextrocurvature|lumbar degenerative disc disease|mild cardiomegaly|mildly enlarged heart|hiatal hernia|vagal nerve stimulator)\\b'\n    ]\n\n    findings = []\n\n    # Iterate through each pattern\n    for pattern in patterns:\n        matches = re.findall(pattern, text_to_analyze)\n        \n        # If there are no matches, continue to the next iteration of the loop\n        if not matches:\n            continue\n\n        # Find the relevant section of the text in `text_to_analyze`\n        for match in matches:\n            finding = {\n                'finding': match,\n                'absent': False,\n                'text': ''\n            }\n\n            # Use regular expressions to find the relevant part of `Text to analyze`.\n            if re.search(r'\\b' + finding['finding'] + r'\\b', text_to_analyze, re.IGNORECASE):\n                for word in matches:\n                    if word != match and re.search(r'\\b' + word + r'\\b', text_to_analyze, re.IGNORECASE) :\n                        finding['text'] = f\"{text_to_analyze} {word}\"\n\n            # Add the finding to the list\n            findings.append(finding)\n\n    return json.dumps(findings, indent=4)\n\n# Example usage:\njson Ini = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', \n           'aortic atherosclerotic vascular calcification', 'atelectasis', 'bronchiectasis', \n           'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall',\n           'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', \n           'diffuse right lower lobe airspace opacity', 'emphysema', 'fibrotic scarring', \n           'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', \n           'increased retrosternal airspace', 'infiltrate in the right lower lobe',\n           'infiltrate in the right middle lobe', 'interstitial opacities', \n           'left mid lung granuloma', 'low lung volumes without focal consolidation', \n           'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart',\n           'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', \n           'normal heart size', 'patchy left lower lobe airspace disease', 'pleural effusion',\n           'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome',\n           'spine dextrocurvature', 'stable mediastinal contours', 'streaky bibasilar airspace opacities', \n           'subsegmental atelectasis', 'tortuous thoracic aorta', 'vagal nerve stimulator']\n\ntext_to_analyze = \"\"\"The cardiac silhouette is enlarged. Thoracic aortic atherosclerotic calcifications are present. There are findings status post sternotomy and CABG. Pulmonary atelectasis or scar is noted within the left midlung. There is blunting of the left costophrenic angle. No pneumothorax.\"\"\"\n\nprint(extract_findings(text_to_analyze))"
    },
    {
        "text": "The cardiomediastinal silhouette is within normal limits for appearance. No focal areas of pulmonary consolidation. No pneumothorax. No pleural effusion. The thoracic spine appears intact. No acute, displaced rib fractures.",
        "res": "import re\n\ndef extract_relevant_findings(jsonIni, Text_to_analyze):\n    # Define a dictionary to map relevant findings and diseases\n    relevant_findings = {\n        'atelectasis': 'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe',\n        'bronchiectasis': 'bronchovascular crowding', 'emphysema', \n        'calcified granulomas/lymph': 'calcified left hilar lymph node',\n        'cardiomegaly': 'mild cardiomegaly', 'mildly enlarged heart', \n        'interstitial opacities': 'interstitial opacities',\n        'pneumothorax': 'No pneumothorax. No pleural effusion.',\n        # Add more relevant findings and diseases here\n    }\n\n    result = []\n\n    for finding in jsonIni:\n        if finding not in ['clear lungs', 'normal heart size'] and re.search(r'inflammation|edema|consolidation|infiltrate|opacity|vascular calcification|granulomas|lymph|scarring', finding, re.IGNORECASE):\n            relevant_text = Text_to_analyze\n            for term, description in relevant_findings.items():\n                if term in finding.lower() and description in relevant_text:\n                    result.append({\n                        'finding': finding,\n                        'absent': False,\n                        'text': relevant_text\n                    })\n    return result\n\njsonIni = ['Right paratracheal stripe is denser', \n           'XXXX opacities in the right mid lung', \n           'aortic atherosclerotic vascular calcification', \n           'atelectasis', \n           'bronchiectasis', \n           'bronchovascular crowding', \n           'bullet in the posterior soft tissues of the left chest wall', \n           'calcified granulomas/lymph', \n           'calcified left hilar lymph node', \n           'clear lungs', \n           'diffuse right lower lobe airspace opacity', \n           'emphysema', \n           'fibrotic scarring', \n           'flattened diaphragm', \n           'hiatal hernia', \n           'hyperinflated lungs', \n           'increased retrosternal airspace', \n           'infiltrate in the right lower lobe', \n           'infiltrate in the right middle lobe', \n           'interstitial opacities', \n           'left mid lung granuloma', \n           'low lung volumes without focal consolidation', \n           'lumbar degenerative disc disease', \n           'mild cardiomegaly', \n           'mildly enlarged heart', \n           'no focal infiltrate', \n           'no pleural effusion', \n           'no suspicious pulmonary nodules', \n           'normal heart size', \n           'patchy left lower lobe airspace disease', \n           'pleural effusion', \n           'pulmonary edema', \n           'pulmonary edema due to acute respiratory distress syndrome', \n           'pulmonary edema due to acute respiratory distress syndrome (ARDS)', \n           'spine dextrocurvature', \n           'stable mediastinal contours', \n           'streaky bibasilar airspace opacities', \n           'subsegmental atelectasis', \n           'tortuous thoracic aorta', \n           'vagal nerve stimulator']\n\nText_to_analyze = \"\"\"The cardiomediastinal silhouette is within normal limits for appearance. No focal areas of pulmonary consolidation. No pneumothorax. No pleural effusion. The thoracic spine appears intact. No acute, displaced rib fractures.\"\"\"\n\nprint(extract_relevant_findings(jsonIni, Text_to_analyze))"
    },
    {
        "text": "Calcified granulomas. Calcified hilar lymph nodes. No focal areas of consolidation. Heart size within normal limits. No pleural effusions. No evidence of pneumothorax. Question large pulmonary arteries. Lung bases are hyperexpanded. Prominent substernal air space. Aortic calcifications. Degenerative changes thoracic spine.",
        "res": "Here is a Python function to parse the provided medical text and extract clinically significant findings and diseases.\n\n```python\nimport re\n\ndef find_clinically_significant_findings(jsonini, text_to_analyze):\n    # Regular expression patterns for clinical findings\n    patterns = {\n        r\"calcified granulomas|calcified hilar lymph node\": [\"finding\", False],\n        r\"focal consolidation\": [\"finding\", False],\n        r\"cardiomegaly|mild cardiomegaly|heart size within normal limits|normal heart size\": [\"finding\", False],\n        r\"pleural effusion|pneumothorax|pulmonary edema|acute respiratory distress syndrome\": [\"finding\", False],\n        r\"aortic calcification|thoracic aorta\": [\"finding\", False],\n        r\"degenerative changes thoracic spine|spine dextrocurvature\": [\"finding\", False],\n    }\n\n    # Find clinically significant findings\n    results = []\n    for pattern, value in patterns.items():\n        if re.search(pattern, text_to_analyze):\n            finding = {\n                \"finding\": value[0],\n                \"absent\": value[1],\n                \"text\": text_to_analyze.split(pattern)[1].strip(),\n            }\n            results.append(finding)\n\n    return results\n\n\n# Provided list of findings\njsonini = [\n    'Right paratracheal stripe is denser',\n    'XXXX opacities in the right mid lung',\n    'aortic atherosclerotic vascular calcification',\n    'atelectasis',\n    'bronchiectasis',\n    'bronchovascular crowding',\n    'bullet in the posterior soft tissues of the left chest wall',\n    'calcified granulomas/lymph',\n    'calcified left hilar lymph node',\n    'clear lungs',\n    'diffuse right lower lobe airspace opacity',\n    'emphysema',\n    'fibrotic scarring',\n    'flattened diaphragm',\n    'hiatal hernia',\n    'hyperinflated lungs',\n    'increased retrosternal airspace',\n    'infiltrate in the right lower lobe',\n    'infiltrate in the right middle lobe',\n    'interstitial opacities',\n    'left mid lung granuloma',\n    'low lung volumes without focal consolidation',\n    'lumbar degenerative disc disease',\n    'mild cardiomegaly',\n    'mildly enlarged heart',\n    'no focal infiltrate',\n    'no pleural effusion',\n    'no suspicious pulmonary nodules',\n    'normal heart size',\n    'patchy left lower lobe airspace disease',\n    'pleural effusion',\n    'pulmonary edema',\n    'pulmonary edema due to acute respiratory distress syndrome',\n    'pulmonary edema due to acute respiratory distress syndrome (ARDS)',\n    'spine dextrocurvature',\n    'stable mediastinal contours',\n    'streaky bibasilar airspace opacities',\n    'subsegmental atelectasis',\n    'tortuous thoracic aorta',\n    'vagal nerve stimulator',\n]\n\n# Text to analyze\ntext_to_analyze = \"\"\"\nCalcified granulomas. Calcified hilar lymph nodes. No focal areas of consolidation. Heart size within normal limits. No pleural effusions. No evidence of pneumothorax. Question large pulmonary arteries. Lung bases are hyperexpanded. Prominent substernal air space. Aortic calcifications. Degenerative changes thoracic spine.\n\"\"\"\n\n# Find clinically significant findings\nresults = find_clinically_significant_findings(jsonini, text_to_analyze)\nprint(results)\n\n```"
    },
    {
        "text": "The cardiac contours are normal. The lungs are clear. Thoracic spondylosis. Mild lumbar degeneration.",
        "res": "import re\nimport json\n\ndef analyze_text(jsonIni, Text_to_analyze):\n    # Define the excluded terms\n    excluded_terms = [\n        r\"unremarkable structures\",\n        r\"normal appearance\",\n        r\"No abnormalities detected\",\n        r\"Mild age-related changes\",\n        r\"Typical anatomy\",\n        r\"Absent Findings\"\n    ]\n\n    # Compile the regular expressions for matching the excluded terms\n    exclude_pattern = re.compile('|'.join(excluded_terms))\n\n    # Initialize an empty list to store the relevant findings and diseases\n    relevant_findings = []\n\n    # Iterate over each finding in jsonIni\n    for finding in jsonIni:\n        # Use regular expression matching to check if the term is present in Text_to_analyze\n        match = re.search(exclude_pattern, finding)\n        \n        # If no matching term found and the finding contains clinically relevant information \n        # (e.g. specific disease name or symptoms) then it could be a valid finding for analysis.\n        if not match and any(disease in finding.lower() for disease in [\"emphysema\", \"bronchovascular crowding\", \"pulmonary edema\", \"pulmonary edema due to acute respiratory distress syndrome\", \"lumbar degenerative disc disease\"]):\n            # Extract the relevant section of text\n            relevant_text = Text_to_analyze\n            \n            # Create an object for the finding and append it to the list\n            obj = {\n                'finding': finding,\n                'absent': True,\n                'text': relevant_text\n            }\n            \n            # Add the object to the list\n            relevant_findings.append(obj)\n\n    return json.dumps(relevant_findings)\n\n# Test the function\njsonIni = [\n    \"Right paratracheal stripe is denser\", \n    \"XXXX opacities in the right mid lung\", \n    \"aortic atherosclerotic vascular calcification\",\n    \"atelectasis\", \n    \"bronchiectasis\", \n    \"bronchovascular crowding\",\n    \"bullet in the posterior soft tissues of the left chest wall\",\n    \"calcified granulomas/lymph\", \n    \"calcified left hilar lymph node\", \n    \"clear lungs\", \n    \"diffuse right lower lobe airspace opacity\", \n    \"emphysema\", \n    \"fibrotic scarring\", \n    \"flattened diaphragm\", \n    \"hiatal hernia\", \n    \"hyperinflated lungs\", \n    \"increased retrosternal airspace\", \n    \"infiltrate in the right lower lobe\", \n    \"infiltrate in the right middle lobe\", \n    \"interstitial opacities\", \n    \"left mid lung granuloma\", \n    \"low lung volumes without focal consolidation\", \n    \"lumbar degenerative disc disease\", \n    \"mild cardiomegaly\", \n    \"mildly enlarged heart\", \n    \"no focal infiltrate\", \n    \"no pleural effusion\", \n    \"no suspicious pulmonary nodules\", \n    \"normal heart size\", \n    \"patchy left lower lobe airspace disease\", \n    \"pleural effusion\", \n    \"pulmonary edema\", \n    \"pulmonary edema due to acute respiratory distress syndrome\", \n    \"spine dextrocurvature\", \n    \"stable mediastinal contours\", \n    \"streaky bibasilar airspace opacities\", \n    \"subsegmental atelectasis\", \n    \"tortuous thoracic aorta\", \n    \"vagal nerve stimulator\"\n]\n\nText_to_analyze = 'The cardiac contours are normal. The lungs are clear. Thoracic spondylosis. Mild lumbar degeneration.'\n\nprint(analyze_text(jsonIni, Text_to_analyze))"
    },
    {
        "text": "Normal heart size and mediastinal contours. No focal airspace consolidation. Tracheostomy tip approximately 5 cm above the carina. No pleural effusion or pneumothorax.",
        "res": "Here is a Python solution that analyzes the given `Text to analyze` and returns a JSON array of clinically significant findings and diseases.\n\n```python\nimport re\n\ndef extract_findings(json_ini):\n    # Dictionary with known finding patterns\n    finding_patterns = {\n        'aortic': ['atherosclerotic', 'vascular calcification'],\n        'cardiac': ['cardiomegaly', 'mildly enlarged heart'],\n        'pulmonary': ['emphysema', 'bronchiectasis', 'bronchovascular crowding',\n                     'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe',\n                     'interstitial opacities', 'left mid lung granuloma'],\n        'spine': ['dextrocurvature', 'lumbar degenerative disc disease'],\n        'mediastinal': ['stable mediastinal contours'],\n    }\n\n    # Extract relevant findings from json_ini\n    relevant_findings = []\n    for finding in json_ini:\n        if finding not in [\"clear lungs\", \"normal heart size\"]:\n            for category, keywords in finding_patterns.items():\n                if any(re.search(r'\\b' + keyword + r'\\b', finding.lower(), re.IGNORECASE) for keyword in keywords):\n                    relevant_findings.append({\n                        'finding': f\"{category.capitalize()} calcification\",\n                        'absent': False,\n                        'text': finding\n                    })\n\n    # Special handling for tracheostomy tip and pleural effusion\n    relevant_findings.append({\n        'finding': \"tracheostomy tip\",\n        'absent': True,\n        'text': re.search(r\"approximately 5 cm above the carina\", Text to analyze, re.IGNORECASE)\n    })\n    if not re.search(r\"No pleural effusion|No pneumothorax\", Text to analyze, re.IGNORECASE):\n        relevant_findings.append({\n            'finding': \"pleural effusion\",\n            'absent': True,\n            'text': re.search(r\"Pleural effusion or pneumothorax is absent\", Text to analyze, re.IGNORECASE)\n        })\n\n    # Filter out irrelevant findings\n    return [finding for finding in relevant_findings if (not finding['absent']) and (\"No pleural\" not in finding['finding'])]\n```\n\nYou can call the function like this:\n\n```python\nText_to_analyze = \"Normal heart size and mediastinal contours. No focal airspace consolidation. Tracheostomy tip approximately 5 cm above the carina. No pleural effusion or pneumothorax.\"\njson_ini = [\n    'Right paratracheal stripe is denser',\n    'XXXX opacities in the right mid lung',\n    'aortic atherosclerotic vascular calcification',\n    'atelectasis',\n    'bronchiectasis',\n    'bronchovascular crowding',\n    'bullet in the posterior soft tissues of the left chest wall',\n    'calcified granulomas/lymph',\n    'calcified left hilar lymph node',\n    'clear lungs',\n    'diffuse right lower lobe airspace opacity',\n    'emphysema',\n    'fibrotic scarring',\n    'flattened diaphragm',\n    'hiatal hernia',\n    'hyperinflated lungs',\n    'increased retrosternal airspace',\n    'infiltrate in the right lower lobe',\n    'infiltrate in the right middle lobe',\n    'interstitial opacities',\n    'left mid lung granuloma',\n    'low lung volumes without focal consolidation',\n    'lumbar degenerative disc disease',\n    'mild cardiomegaly',\n    'mildly enlarged heart',\n    'no focal infiltrate',\n    'no pleural effusion',\n    'no suspicious pulmonary nodules',\n    'normal heart size',\n    'patchy left lower lobe airspace disease',\n    'pleural effusion',\n    'pulmonary edema',\n    'pulmonary edema due to acute respiratory distress syndrome',\n    'spine dextrocurvature',\n    'stable mediastinal contours',\n    'streaky bibasilar airspace opacities',\n    'subsegmental atelectasis',\n    'tortuous thoracic aorta',\n    'vagal nerve stimulator'\n]\n\nfindings = extract_findings(json_ini)\nprint(findings)\n```\n\nPlease note that this function is designed to detect clinically significant findings and diseases. The output may not be exhaustive, as the original text does not necessarily contain explicit clinical findings or diseases."
    },
    {
        "text": "Mild cardiac enlargement. Reduced pulmonary capacities without focal consolidation, pneumothorax, or substantial pleural accumulation. Negative for acute skeletal malformation.",
        "res": "import json\nimport re\n\ndef extract_findings(jsonIni, Text_to_analyze):\n    # Define patterns to exclude normal findings and general descriptions\n    patterns = [\n        r'unremarkable structures|normal appearance|no abnormalities detected|mild age-related changes|typical anatomy|absent findings',\n        r'the [a-z]+ patient is [a-z]+|the patient has [a-z]+|no significant findings'\n    ]\n\n    # Initialize an empty list to store the extracted findings\n    findings = []\n\n    # Iterate through each finding in the jsonIni list\n    for finding in jsonIni:\n        # Define a pattern for the finding and its absence\n        finding_pattern = re.compile(f'({finding})|not ({finding})')\n\n        # Find all matches of the finding and its absence in the Text to analyze\n        matches = re.findall(finding_pattern, Text_to_analyze)\n\n        # If no match is found, skip this finding\n        if not matches:\n            continue\n\n        # Extract the text relevant for the identification from the text\n        text = re.search(f'({finding})|not ({finding})', Text_to_analyze)\n        if text:\n            extracted_text = text.group()\n        else:\n            continue\n\n        # Check if the finding is absent or present in the text\n        is_absent = 'not' in matches[0] and not re.search(r'\\b(' + extracted_text + r')\\b', Text_to_analyze)\n\n        # Append the extracted finding to the list\n        findings.append({\n            \"finding\": finding,\n            \"absent\": str(is_absent),\n            \"text\": extracted_text\n        })\n\n    return findings\n\n# Example usage:\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung']\nText_to_analyze = 'Mild cardiac enlargement. Reduced pulmonary capacities without focal consolidation, pneumothorax, or substantial pleural accumulation. Negative for acute skeletal malformation.'\nfindings = extract_findings(jsonIni, Text_to_analyze)\nprint(json.dumps(findings, indent=4))"
    },
    {
        "text": "The heart is mildly enlarged. Lung volumes are low. There is no focal consolidation, pneumothorax, or large pleural effusion. Bony structures are within normal limits. There is no free air under the diaphragm. There is a mild amount of diverticulitis seen in the transverse colon.",
        "res": "import re\nimport json\n\n# List of clinically relevant findings and diseases\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', \n           'aortic atherosclerotic vascular calcification', 'atelectasis', 'bronchiectasis', \n           'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', \n           'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', \n           'diffuse right lower lobe airspace opacity', 'emphysema', 'fibrotic scarring', \n           'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace', \n           'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', \n           'interstitial opacities', 'left mid lung granuloma', 'low lung volumes without focal consolidation', \n           'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart', \n           'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', \n           'normal heart size', 'patchy left lower lobe airspace disease', 'pleural effusion', \n           'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome', \n           'spine dextrocurvature', 'stable mediastinal contours', 'streaky bibasilar airspace opacities', \n           'subsegmental atelectasis', 'tortuous thoracic aorta', 'vagal nerve stimulator']\n\n# Extract clinically relevant findings and diseases from the text\ndef extract_findings(text):\n    findings = []\n    \n    # Regular expression to match \"mild\" or \"low\"\n    mild_regex = re.compile(r'(mild|low)(\\w*)')\n    \n    # Find all mentions of clinically significant findings and diseases in the text\n    for line in text.split('\\n'):\n        if line:\n            if 'mild' in line.lower():\n                match = mild_regex.search(line)\n                finding = match.group(2) + ', absent: true'\n                findings.append(json.dumps({\n                    \"finding\": finding,\n                    \"absent\": True,\n                    \"text\": line\n                }))\n            elif ' XXXX' in line:\n                finding = 'pulmonary edema due to acute respiratory distress syndrome, absent: false'\n                findings.append(json.dumps({\n                    \"finding\": finding,\n                    \"absent\": False,\n                    \"text\": line\n                }))\n            else:\n                match = re.search(r'\\b(\\w+)\\b', line)\n                if match:\n                    finding = match.group(0) + ', absent: false'\n                    findings.append(json.dumps({\n                        \"finding\": finding,\n                        \"absent\": False,\n                        \"text\": line\n                    }))\n\n    return findings\n\n# Text to analyze\nText to analyze = \"\"\"The heart is mildly enlarged. Lung volumes are low. There is no focal consolidation, pneumothorax, or large pleural effusion. Bony structures are within normal limits. There is a mild amount of diverticulitis seen in the transverse colon.\"\"\"\n\n# Extract findings from the text\nfindings = extract_findings(Text to analyze)\n\nprint(json.dumps(findings, indent=4))"
    },
    {
        "text": "The heart is normal in size. The mediastinal contours are stable. Aortic calcifications are noted. There are small calcified lymph nodes. Emphysema and chronic changes are identified. There is pulmonary opacity in the left perihilar upper lobe. There is questionable basal extension to the pleural surface. This may represent acute infiltrate or developing density. There is no pleural effusion or pneumothorax.",
        "res": "import json\nimport re\n\ndef analyze_text(jsonIni, Text_to_analyze):\n    # Define regular expressions for common findings and diseases\n    finding_patterns = {\n        r\"aortic atherosclerotic vascular calcification\": {\"finding\": \"Aortic calcifications\", \"absent\": False},\n        r\"atherosclerotic vascular calcification\": {\"finding\": \"Aortic calcifications\", \"absent\": False},\n        r\"atelectasis\": {\"finding\": \"Atelectasis\", \"absent\": False},\n        r\"bronchiectasis\": {\"finding\": \"Bronchiectasis\", \"absent\": False},\n        r\"emphysema\": {\"finding\": \"Emphysema\", \"absent\": False},\n        r\"interstitial opacities\": {\"finding\": \"Interstitial opacities\", \"absent\": False},\n        r\"pulmonary edema\": {\"finding\": \"Pulmonary edema\", \"absent\": False},\n        r\"chronic changes\": {\"finding\": \"Chronic changes\", \"absent\": False},\n        r\"calculated granulomas/lymph\": {\"finding\": \"Calcified granulomas/Lymph nodes\", \"absent\": False},\n        r\"low lung volumes without focal consolidation\": {\"finding\": \"Low lung volumes\", \"absent\": True},\n    }\n\n    # Initialize list to store extracted findings\n    extracted_findings = []\n\n    # Iterate over each finding and its pattern\n    for finding, pattern in finding_patterns.items():\n        # Search for the finding in the text\n        search_text = re.search(finding, Text_to_analyze)\n        if search_text:\n            # If found, extract relevant information and add to list\n            extracted_findings.append({\n                \"finding\": pattern[\"finding\"],\n                \"absent\": pattern[\"absent\"] if pattern[\"finding\"] == \"Low lung volumes\" else False,\n                \"text\": re.search(r\".*?\" + pattern[\"finding\"], Text_to_analyze, flags=re.IGNORECASE).group()\n            })\n\n    # Return extracted findings as a JSON array\n    return json.dumps(extracted_findings)\n\n# Test the function\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', \n           'aortic atherosclerotic vascular calcification', 'atelectasis', \n           'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', \n           'calcified granulomas/lymph', 'calcified left hilar lymph node', \n           'clear lungs', 'diffuse right lower lobe airspace opacity', \n           'emphysema', 'fibrotic scarring', 'flattened diaphragm', \n           'hiatal hernia', 'hyperinflated lungs', \n           'increased retrosternal airspace', 'infiltrate in the right lower lobe', \n           'infiltrate in the right middle lobe', \n           'interstitial opacities', 'left mid lung granuloma', \n           'low lung volumes without focal consolidation', \n           'lumbar degenerative disc disease', \n           'mild cardiomegaly', \n           'mildly enlarged heart', \n           'no focal infiltrate', \n           'no pleural effusion', \n           'no suspicious pulmonary nodules', \n           'normal heart size', \n           'patchy left lower lobe airspace disease', \n           'pleural effusion', \n           'pulmonary edema', \n           'spine dextrocurvature', \n           'stable mediastinal contours', \n           'streaky bibasilar airspace opacities', \n           'subsegmental atelectasis', \n           'tortuous thoracic aorta', \n           'vagal nerve stimulator']  # List of findings and diseases can be appear.\n\nText_to_analyze = \"The heart is normal in size. The mediastinal contours are stable. Aortic calcifications are noted. There are small calcified lymph nodes. Emphysema and chronic changes are identified. There is pulmonary opacity in the left perihilar upper lobe. There is questionable basal extension to the pleural surface. This may represent acute infiltrate or developing density. There is no pleural effusion or pneumothorax.\"\n\nprint(analyze_text(jsonIni, Text_to_analyze))"
    },
    {
        "text": "The heart is mildly enlarged. Left hemidiaphragm is elevated. There is no acute infiltrate or pleural effusion. The mediastinum is unremarkable.",
        "res": "import json\nimport re\n\n# Define the list of clinically relevant findings and diseases\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', \n           'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', \n           'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity', \n           'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace', \n           'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', 'interstitial opacities', 'left mid lung granuloma', \n           'low lung volumes without focal consolidation', 'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart', \n           'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', 'normal heart size', 'patchy left lower lobe airspace disease', \n           'pleural effusion', 'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome', 'spine dextrocurvature', \n           'stable mediastinal contours', 'streaky bibasilar airspace opacities', 'subsegmental atelectasis', 'tortuous thoracic aorta']\n\ndef extract_findings(text):\n    findings = []\n    \n    # Split the text into sentences\n    sentences = re.split(r'[.!?]', text.lower())\n    \n    # Iterate over each sentence\n    for i, sentence in enumerate(sentences):\n        if sentence == '' or 'unremarkable structures' in sentence:\n            continue\n        \n        # Check for findings in the list of clinically relevant findings and diseases\n        for finding in jsonIni:\n            if finding in sentence:\n                finding_dict = {\n                    \"finding\": finding,\n                    \"absent\": False,\n                    \"text\": \"\"\n                }\n                \n                if \"is denser\" in finding or \"calcified\" in finding:\n                    # If the finding is a density or calcification, extract the relevant text\n                    for j, other_sentence in enumerate(sentences[i+1:], i + 2):\n                        if f\"{finding} {re.escape('in')}\" not in other_sentence.lower() and \\\n                           \"absent\" not in find_dict:\n                            find_dict[\"text\"] = other_sentence.strip()\n                            findings.append(find_dict)\n                elif 'atelectasis' in finding or 'infiltrate' in sentence or 'consolidation' in sentence:\n                    # If the finding is a condition related to atelectasis, infiltrate, or consolidation, extract the relevant text\n                    for j, other_sentence in enumerate(sentences[i+1:], i + 2):\n                        if f\"{finding} {re.escape('in')}\" not in other_sentence.lower() and \\\n                           \"absent\" not in find_dict:\n                            find_dict[\"text\"] = other_sentence.strip()\n                            findings.append(find_dict)\n                else:\n                    # If the finding is a condition unrelated to atelectasis, infiltrate, or consolidation, extract the relevant text\n                    for j, other_sentence in enumerate(sentences[i+1:], i + 2):\n                        if \"absent\" not in find_dict and \\\n                           f\"{finding} {re.escape('in')}\" in other_sentence.lower():\n                            find_dict[\"text\"] = other_sentence.strip()\n                            findings.append(find_dict)\n            # If the finding is absent, extract the relevant text\n            else:\n                for j, other_sentence in enumerate(sentences[i+1:], i + 2):\n                    if \"absent\" not in find_dict and \\\n                       f\"{finding} {re.escape('in')}\" in other_sentence.lower():\n                        find_dict[\"text\"] = other_sentence.strip()\n                        findings.append(find_dict)\n    \n    return findings\n\n# Input text\nText_to_analyze = \"\"\"\nThe heart is mildly enlarged. Left hemidiaphragm is elevated. There is no acute infiltrate or pleural effusion. The mediastinum is unremarkable.\n\"\"\"\n\n# Extract clinically relevant findings and diseases\nfindings = extract_findings(Text_to_analyze)\n\n# Convert to JSON array\njson_array = json.dumps(findings, indent=4)\n\nprint(json_array)"
    },
    {
        "text": "The cardiomediastinal silhouette and pulmonary vasculature are within normal limits in size. The lungs are mildly hyperinflated with flattening of the diaphragms and expansion of the retrosternal clear space. Compared with prior exam, there has been interval resolution of previously demonstrated bibasilar infiltrates. There is minimal right midlung fibrosis or atelectasis. There is no focal airspace disease. There is no pneumothorax or pleural effusion. There are no acute bony findings.",
        "res": "def process_text(jsonIni, Text_to_analyze):\n    # Define a set of keywords that indicate clinically significant findings\n    significance_keywords = {\n        \"disease\",\n        \"infection\",\n        \"inflammation\",\n        \"neoplasm\",\n        \"vascular\",\n        \"atherosclerosis\",\n        \"ARDS\",\n        \"pneumonia\"\n    }\n\n    def find_significant_findings(text):\n        # Use a simple parser to break the text into sentences and extract clinically relevant findings\n        sentences = re.split(r'[.!?]', text)\n        significant_findings = []\n        \n        for sentence in sentences:\n            for keyword in significance_keywords:\n                if keyword.lower() in sentence.lower():\n                    significant_findings.append(sentence.strip())\n                    break\n\n        return significant_findings\n\n\n    # Initialize the output array\n    result = []\n\n    # Iterate over each finding and its absence status in the input list\n    for finding in jsonIni:\n        # Find the relevant text from the provided text\n        for sentence in Text_to_analyze.split('.'):\n            if finding.lower() in sentence.lower():\n                # Append a dictionary containing the finding, its absence status, and the relevant section of the text to the result array\n                result.append({\n                    'finding': finding,\n                    'absent': not bool(finding),\n                    'text': sentence.strip()\n                })\n    \n    return [finding for finding in result if finding['absent'] == 'false']"
    },
    {
        "text": "Cardiomediastinal silhouettes are within normal limits. Lungs are without focal consolidation, pneumothorax, or pleural effusion. Grossly unchanged appearance of calcified hilar lymph nodes and scattered calcified granulomas. Stable degenerative changes in the spine.",
        "res": "import re\nimport json\n\ndef extract_clinically_relevant_findings(jsonIni, Text_to_analyze):\n    # Define patterns for clinically significant findings and diseases\n    patterns = [\n        r\"calcified granulomas/lymph|calcified left hilar lymph node|aortic atherosclerotic vascular calcification|pulmonary edema|pulmonary edema due to acute respiratory distress syndrome|pulmonary edema due to acute respiratory distress syndrome\\(ards\\)|hiatal hernia|emphysema|bronchiectasis|bronchovascular crowding|infiltrate in the right lower lobe|infiltrate in the right middle lobe|interstitial opacities|left mid lung granuloma|low lung volumes without focal consolidation|mild cardiomegaly|mildly enlarged heart|patchy left lower lobe airspace disease|spine dextrocurvature|tortuous thoracic aorta\",\n        r\"aortic dissection|aortic aneurysm|anterior dislocation of the shoulder|displaced fracture of the clavicle|dislocated shoulder|fracture dislocation of the shoulder|unrestrained left lateral deceleration with circumferential chest injury\"\n    ]\n\n    # Initialize list to store clinically relevant findings\n    clinically_relevant_findings = []\n\n    # Iterate over each finding and disease in jsonIni\n    for finding in jsonIni:\n        # Check if finding matches any pattern\n        for pattern in patterns:\n            match = re.search(pattern, finding)\n            if match:\n                # Extract relevant text from Text to analyze\n                relevant_text = f\"Cardiomediastinal silhouettes are within normal limits. Lungs are without focal consolidation, pneumothorax, or pleural effusion. Grossly unchanged appearance of calcified hilar lymph nodes and scattered calcified granulomas. Stable degenerative changes in the spine.\"\n                \n                # Check if finding is present in relevant text\n                if re.search(pattern, relevant_text):\n                    # Create dictionary for finding with relevant information\n                    clinically_relevant_findings.append({\n                        \"finding\": finding,\n                        \"absent\": False,\n                        \"text\": relevant_text\n                    })\n\n    return json.dumps(clinically_relevant_findings)\n\n# Example usage:\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', ...]\nText_to_analyze = \"Cardiomediastinal silhouettes are within normal limits. Lungs are without focal consolidation, pneumothorax, or pleural effusion. Grossly unchanged appearance of calcified hilar lymph nodes and scattered calcified granulomas. Stable degenerative changes in the spine.\"\nprint(extract_clinically_relevant_findings(jsonIni, Text_to_analyze))"
    },
    {
        "text": "The left lung is grossly clear. The right lung demonstrates a large right pleural effusion with associated atelectatic collapse of the right middle lobe and partial collapse of the right lower lobe. Bilateral interstitial opacities are seen within the aerated right lung, subsegmental atelectasis. No focal consolidation or pneumothorax identified. No acute osseous abnormality. Cardio mediastinal silhouette is stable compared to prior examinations.",
        "res": "import json\nimport re\n\ndef extract_clinical_findings(jsonIni, Text_to_analyze):\n    # Predefined list of excluded terms\n    exclude_terms = [\n        'unremarkable structures', 'normal appearance', \n        'no abnormalities detected', 'mild age-related changes', \n        'typical anatomy', 'absent findings'\n    ]\n\n    clinical_findings = []\n\n    for finding in jsonIni:\n        # Check if the term is not excluded and appears in the text\n        if finding.lower() not in exclude_terms and re.search(finding, Text_to_analyze):\n            # Add the finding to the list of clinical findings\n            clinical_findings.append({\n                \"finding\": finding,\n                \"absent\": False,\n                \"text\": Text_to_analyze[Text_to_analyze.find(finding):]\n            })\n\n    return json.dumps([{\"finding\": f, \"absent\": False, \"text\": t} for f, t in clinical_findings])\n\nprint(extract_clinical_findings(['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', 'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', 'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity', 'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace', 'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', 'interstitial opacities', 'left mid lung granuloma', 'low lung volumes without focal consolidation', 'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart', 'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', 'normal heart size', 'patchy left lower lobe airspace disease', 'pleural effusion', 'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome', 'spine dextrocurvature', 'stable mediastinal contours', 'streaky bibasilar airspace opacities', 'subsegmental atelectasis', 'tortuous thoracic aorta', 'vagal nerve stimulator'], \"The left lung is grossly clear. The right lung demonstrates a large right pleural effusion with associated atelectatic collapse of the right middle lobe and partial collapse of the right lower lobe. Bilateral interstitial opacities are seen within the aerated right lung, subsegmental atelectasis. No focal consolidation or pneumothorax identified. No acute osseous abnormality. Cardio mediastinal silhouette is stable compared to prior examinations.\"))\n\nprint(json.loads(extract_clinical_findings(['XXXX opacities in the right mid lung'], \"The left lung is grossly clear. The right lung demonstrates a large right pleural effusion with associated atelectatic collapse of the right middle lobe and partial collapse of the right lower lobe. Bilateral interstitial opacities are seen within the aerated right lung, subsegmental atelectasis. No focal consolidation or pneumothorax identified. No acute osseous abnormality. Cardio mediastinal silhouette is stable compared to prior examinations.\"))))"
    },
    {
        "text": "The lungs are mildly hyperexpanded. There is no focal airspace consolidation to suggest pneumonia. No pleural effusion or pneumothorax. Normal heart size and mediastinal contour.",
        "res": "import json\nfrom typing import List, Dict\n\ndef extract_clinically_relevant_findings(jsonIni: List[str], Text_to_analyze: str) -> List[Dict]:\n    # Define a list of clinically significant findings and diseases\n    relevant_findings = [\n        'atelectasis', 'bronchiectasis', 'bronchovascular crowding',\n        'bullet in the posterior soft tissues of the left chest wall',\n        'calcified granulomas/lymph', 'calcified left hilar lymph node',\n        'clear lungs', 'diffuse right lower lobe airspace opacity',\n        'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia',\n        'hyperinflated lungs', 'increased retrosternal airspace', \n        'infiltrate in the right lower lobe', 'interstitial opacities',\n        'left mid lung granuloma', 'low lung volumes without focal consolidation',\n        'lumbar degenerative disc disease', 'mild cardiomegaly', \n        'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome', \n        'spine dextrocurvature'\n    ]\n\n    # Initialize an empty list to store the extracted findings\n    extracted_findings = []\n\n    # Loop through each finding in the jsonIni list\n    for finding in jsonIni:\n        # Check if the finding is relevant and present in the text\n        if finding.lower() in Text_to_analyze.lower():\n            # Extract the section of the text relevant to the finding\n            start_index = Text_to_analyze.find(finding)\n            end_index = start_index + len(finding)\n            relevant_text = Text_to_analyze[start_index:end_index]\n\n            # Add the extracted finding to the list\n            extracted_findings.append({\n                'finding': finding,\n                'absent': False,\n                'text': relevant_text\n            })\n\n    return extracted_findings"
    }
]