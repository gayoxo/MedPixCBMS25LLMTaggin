[
    {
        "text": "Lungs are clear without focal consolidation, effusion, or pneumothorax. Normal heart size. No suspicious pulmonary nodules or masses. Bony thorax and soft tissues grossly unremarkable.",
        "res": "import json\nimport re\n\ndef extract_findings(jsonIni, Text_to_analyze):\n    # List of clinically significant findings and diseases to look for in Text_to_analyze\n    key_words = ['atelectasis', 'bronchiectasis', 'emphysema', 'fibrotic scarring',\n                 'hiatal hernia', 'hyperinflated lungs', 'infiltrate in the right lower lobe',\n                 'interstitial opacities', 'left mid lung granuloma', 'low lung volumes without focal consolidation',\n                 'mild cardiomegaly', 'pulmonary edema', 'spine dextrocurvature']\n\n    # Initialize empty list to store extracted findings\n    findings = []\n\n    for finding in jsonIni:\n        # Use regular expression to match the key word in Text_to_analyze\n        match = re.search(r'\\b' + finding.lower() + r'\\b', Text_to_analyze, re.IGNORECASE)\n        if match:\n            # If a match is found, extract the relevant section of text\n            # and add it to the findings list along with its absence status\n            start_index = Text_to_analyze.find(match.group()) + len(match.group())\n            end_index = Text_to_analyze.find(f' ', start_index)\n            if end_index == -1:\n                end_index = len(Text_to_analyze)\n\n            finding_data = {\n                \"finding\": finding,\n                \"absent\": False,\n                \"text\": f\"{Text_to_analyze[start_index:end_index]}\"\n            }\n            findings.append(finding_data)\n\n    return json.dumps([finding for finding in findings if finding[\"absent\"] == \"False\"])"
    },
    {
        "text": "No pneumothorax, pleural effusion or airspace consolidation. Heart size and pulmonary vasculature appear within normal limits. XXXX XXXX are intact.",
        "res": "def extract_findings(jsonIni, Text_to_analyze):\n    # Extract relevant sections of the text\n    relevant_text = [line for line in Text_to_analyze.split('\\n') if not line.startswith(('No', 'Normal'))]\n\n    # Filter out non-relevant findings\n    filtered_jsonIni = []\n    for finding in jsonIni:\n        if finding in relevant_text:\n            filtered_jsonIni.append(finding)\n\n    # Remove duplicates while preserving order\n    seen = set()\n    unique_filtered_jsonIni = []\n    for item in filtered_jsonIni:\n        if item not in seen:\n            unique_filtered_jsonIni.append(item)\n            seen.add(item)\n\n    # Extract clinically significant findings and diseases\n    findings_with_absent = []\n    for finding in unique_filtered_jsonIni:\n        text_match = [line for line in relevant_text if finding.lower() in line]\n        if len(text_match) == 0 or 'are intact.' not in Text_to_analyze.split('\\n')[text_match.index(text_match[0]) + 1]:\n            findings_with_absent.append({\n                \"finding\": finding,\n                \"absent\": True,\n                \"text\": ', '.join(text_match)\n            })\n        else:\n            findings_with_absent.append({\n                \"finding\": finding,\n                \"absent\": False,\n                \"text\": ', '.join(text_match)\n            })\n\n    return findings_with_absent\n\n# Test the function\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', 'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', 'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity', 'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace', 'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', 'interstitial opacities', 'left mid lung granuloma', 'low lung volumes without focal consolidation', 'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart', 'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', 'normal heart size', 'patchy left lower lobe airspace disease', 'pleural effusion', 'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome', 'spine dextrocurvature', 'stable mediastinal contours', 'streaky bibasilar airspace opacities', 'subsegmental atelectasis', 'tortuous thoracic aorta', 'vagal nerve stimulator']\nText_to_analyze = \"No pneumothorax, pleural effusion or airspace consolidation. Heart size and pulmonary vasculature appear within normal limits. XXXX XXXX are intact.\"\n\nresult = extract_findings(jsonIni, Text_to_analyze)\nprint(result)"
    },
    {
        "text": "Calcified granulomas. Calcified hilar XXXX. No focal areas of consolidation. Heart size within normal limits. No pleural effusions. No evidence of pneumothorax. Question large pulmonary arteries. Lung XXXX are hyperexpanded. Prominent substernal air space. Aortic calcifications. Degenerative changes thoracic spine.",
        "res": "import json\nimport re\n\ndef extract_findings(jsonIni, Text_to_analyze):\n    # Define a list of clinically relevant words and phrases to look for in the text\n    relevant_words = ['calcified granulomas', 'pulmonary edema', 'aortic calcifications', 'lumbar degenerative disc disease']\n    \n    findings = []\n\n    for finding in jsonIni:\n        pattern = re.compile(re.escape(finding))\n        \n        match = pattern.search(Text_to_analyze)\n        \n        if match:\n            # Extract the relevant text and determine if it's present or absent\n            relevant_text = Text_to_analyze[match.start():match.end()]\n            is_present = 'true' in relevant_text.lower()\n            \n            findings.append({\n                \"finding\": finding,\n                \"absent\": not is_present,\n                \"text\": relevant_text\n            })\n\n    return json.dumps(findings)\n\n# Example usage:\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', \n           'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall',\n           'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity',\n           'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', \n           'increased retrosternal airspace', 'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe',\n           'interstitial opacities', 'left mid lung granuloma', 'low lung volumes without focal consolidation', \n           'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart', \n           'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', 'normal heart size',\n           'patchy left lower lobe airspace disease', 'pleural effusion', 'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome',\n           'spine dextrocurvature', 'stable mediastinal contours', 'streaky bibasilar airspace opacities', \n           'subsegmental atelectasis', 'tortuous thoracic aorta', 'vagal nerve stimulator']\n            Text_to_analyze = \"Calcified granulomas. Calcified hilar XXXX. No focal areas of consolidation. Heart size within normal limits. No pleural effusions. No evidence of pneumothorax. Question large pulmonary arteries. Lung XXXX are hyperexpanded. Prominent substernal air space. Aortic calcifications. Degenerative changes thoracic spine.\"\n\nprint(extract_findings(jsonIni, Text_to_analyze))"
    },
    {
        "text": "2 images. Calcified granuloma left upper lobe. Heart size and pulmonary vascular engorgement appear within limits of normal. Mediastinal contour is unremarkable. No focal consolidation, pleural effusion, or pneumothorax identified. No convincing acute bony findings.",
        "res": "import re\nimport json\n\ndef extract_findings(jsonIni, Text_to_analyze):\n    # Filter out irrelevant findings and diseases\n    relevant_findings = [finding for finding in jsonIni if finding.lower() not in [\"normal heart size\", \"typical anatomy\", \"absent findings\", \"unremarkable structures\"]]\n\n    # Extract clinically significant findings and diseases from the text\n    findings = []\n    for finding in relevant_findings:\n        pattern = r'\\b' + re.escape(finding) + r'\\b'\n        if re.search(pattern, Text_to_analyze):\n            match = re.search(pattern, Text_to_analyze)\n            findings.append({\n                \"finding\": finding,\n                \"absent\": \"true\" if not match else \"false\",\n                \"text\": match.group()\n            })\n\n    return json.dumps(findings)\n\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', \n           'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall',\n           'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity',\n           'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace',\n           'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', 'interstitial opacities', 'left mid lung granuloma',\n           'low lung volumes without focal consolidation', 'lumbar degenerative disc disease', 'mild cardiomegaly', \n           'mildly enlarged heart', 'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', \n           'normal heart size', 'patchy left lower lobe airspace disease', 'pleural effusion', 'pulmonary edema',\n           'pulmonary edema due to acute respiratory distress syndrome', 'spine dextrocurvature', 'stable mediastinal contours',\n           'streaky bibasilar airspace opacities', 'subsegmental atelectasis', 'tortuous thoracic aorta', 'vagal nerve stimulator']\n\nText_to_analyze = \"Calcified granuloma left upper lobe. Heart size and pulmonary vascular engorgement appear within limits of normal. Mediastinal contour is unremarkable. No focal consolidation, pleural effusion, or pneumothorax identified. No convincing acute bony findings.\"\n\nprint(extract_findings(jsonIni, Text_to_analyze))"
    },
    {
        "text": "There is moderate cardiomegaly. There are bilateral interstitial opacities, increased since the previous exam. No focal airspace consolidation, pleural effusions or pneumothorax. No acute bony abnormalities.",
        "res": "import json\nfrom typing import List\n\ndef extract_clinical_findings(jsonIni: List[str], Text_to_analyze: str) -> List[dict]:\n    # Define a list of clinically relevant findings and diseases\n    clinically_significant_findings = [\n        \"cardiomegaly\",\n        \"Interstitial opacities\",\n        \"Pleural effusion\",\n        \"Pulmonary edema\",\n        \"ARDS\",\n        \"Bronchovascular crowding\",\n        \"Atelectasis\",\n        \"Emphysema\",\n        \"Fibrotic scarring\"\n    ]\n\n    # Initialize an empty list to store the extracted findings\n    extracted_findings = []\n\n    # Split the text into sentences\n    sentences = Text_to_analyze.split(\". \")\n\n    # Iterate over each sentence in the text\n    for i, sentence in enumerate(sentences):\n        # Check if any clinically significant finding is present in the sentence\n        for finding in clinically_significant_findings:\n            if finding.lower() in sentence.lower():\n                # Extract the relevant section of the text\n                relevant_text = f\". '{sentence}'\"\n                \n                # Create a dictionary to store the extracted finding\n                finding_dict = {\n                    \"finding\": finding,\n                    \"absent\": False,\n                    \"text\": relevant_text\n                }\n                \n                # Append the dictionary to the list of extracted findings\n                extracted_findings.append(finding_dict)\n\n    # Return the list of extracted findings\n    return extracted_findings\n\n# Example usage:\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', \n           'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', \n           'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity', \n           'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace', \n           'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', 'interstitial opacities', 'left mid lung granuloma', \n           'low lung volumes without focal consolidation', 'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart', \n           'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', 'normal heart size', 'patchy left lower lobe airspace disease', \n           'pleural effusion', 'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome', 'spine dextrocurvature', \n           'stable mediastinal contours', 'streaky bibasilar airspace opacities', 'subsegmental atelectasis', 'tortuous thoracic aorta', \n           'vagal nerve stimulator']\nText_to_analyze = \"There is moderate cardiomegaly. There are bilateral interstitial opacities, increased since the previous exam.\"\nprint(json.dumps(extract_clinical_findings(jsonIni, Text_to_analyze), indent=4))"
    },
    {
        "text": "The lungs are clear. The heart and pulmonary XXXX are normal. The pleural spaces are clear. The mediastinal contours are normal. There are mild degenerative changes of the thoracic spine.",
        "res": "import json\nimport re\n\ndef extract_clinically_relevant_findings(jsonIni, Text_to_analyze):\n    # Define a list of normal findings and anatomical descriptions to exclude\n    excluded_terms = [\n        'normal',\n        'unremarkable structures',\n        'normal appearance',\n        'no abnormalities detected',\n        'mild age-related changes',\n        'typical anatomy',\n        'absent findings'\n    ]\n\n    # Initialize an empty list to store the extracted findings\n    extracted_findings = []\n\n    # Iterate over each finding in the jsonIni list\n    for finding in jsonIni:\n        # Check if the term is not already excluded\n        if any(excluded_term not in finding.lower() for excluded_term in excluded_terms):\n            # Use regular expression to extract the relevant section of the text from Text_to_analyze\n            pattern = re.compile(r'\\b' + re.escape(findings) + r'\\b', re.IGNORECASE)\n            match = pattern.search(Text_to_analyze)\n\n            if match:\n                # If a match is found, add it to the extracted findings list with default values\n                extracted_findings.append({\n                    \"finding\": finding,\n                    \"absent\": False,\n                    \"text\": \"\"\n                })\n            else:\n                # If no match is found, add the term to the extracted findings list without a text section\n                extracted_findings.append({\n                    \"finding\": finding,\n                    \"absent\": True,\n                    \"text\": \"\"\n                })\n\n    return json.dumps(extracted_findings)\n\n# Example usage:\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification']\nText_to_analyze = \"The lungs are clear. The heart and pulmonary XXXX are normal. The pleural spaces are clear. The mediastinal contours are normal. There are mild degenerative changes of the thoracic spine.\"\nprint(extract_clinically_relevant_findings(jsonIni, Text_to_analyze))"
    },
    {
        "text": "Heart size and pulmonary vascularity appear within normal limits. Lungs are free of focal airspace disease. No pleural effusion or pneumothorax is seen.",
        "res": "def analyze_text(jsonIni, Text_to_analyze):\n    # Extract clinically relevant findings and diseases\n    relevant_findings = [finding for finding in jsonIni if not ('absent' in finding or 'normal' in finding)]\n\n    # Filter out general observations and normal findings\n    filtered_findings = []\n    for finding in relevant_findings:\n        # Check if the term is present in the text\n        if finding['text'] in Text_to_analyze:\n            # Determine if the finding is absent\n            finding['absent'] = 'true' not in str(finding)\n            filtered_findings.append(finding)\n\n    return filtered_findings\n\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', 'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', 'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity', 'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace', 'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', 'interstitial opacities', 'left mid lung granuloma', 'low lung volumes without focal consolidation', 'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart', 'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', 'normal heart size', 'patchy left lower lobe airspace disease', 'pleural effusion', 'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome', 'spine dextrocurvature', 'stable mediastinal contours', 'streaky bibasilar airspace opacities', 'subsegmental atelectasis', 'tortuous thoracic aorta', 'vagal nerve stimulator']\nText_to_analyze = \"Heart size and pulmonary vascularity appear within normal limits. Lungs are free of focal airspace disease. No pleural effusion or pneumothorax is seen.\"\n\nresult = analyze_text(jsonIni, Text_to_analyze)\nprint(result)"
    },
    {
        "text": "Normal cardiac contours. Clear lung XXXX bilaterally. No pneumothorax or pleural effusion.",
        "res": "def extract_clinically_relevant_findings(jsonIni, Text_to_analyze):\n    # Define a set of clinically relevant findings and diseases\n    clinically_significant_terms = {\n        'atelectasis', 'bronchiectasis', 'emphysema',\n        'fibrotic scarring', 'hiatal hernia', 'increased retrosternal airspace',\n        'infiltrates', 'interstitial opacities', 'left mid lung granuloma',\n        'lumbar degenerative disc disease', 'mild cardiomegaly',\n        'pulmonary edema', 'spine dextrocurvature'\n    }\n\n    # Initialize an empty list to store the extracted findings\n    extracted_findings = []\n\n    # Iterate over each finding in jsonIni\n    for finding in jsonIni:\n        # Check if the finding is clinically significant and present in Text_to_analyze\n        if finding.lower() in clinically_significant_terms and any(\n                term in Text_to_analyze.lower()\n                for term in ['pneumothorax', 'pleural effusion']\n        ):\n            # Extract the relevant text from Text_to_analyze that matches the finding\n            relevant_text = [sentence for sentence in Text_to_analyze.split('.') if finding.lower() in sentence]\n            \n            # Check if a match is found, otherwise skip to the next finding\n            if relevant_text:\n                extracted_findings.append({\n                    'finding': finding,\n                    'absent': False,\n                    'text': '. '.join(relevant_text)\n                })\n\n    return extracted_findings\n\n# Example usage:\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', \n           'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', \n           'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity', \n           'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace', \n           'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', 'interstitial opacities', 'left mid lung granuloma', \n           'low lung volumes without focal consolidation', 'lumbar degenerative disc disease', 'mild cardiomegaly',\n            'pulmonary edema', 'spine dextrocurvature']\n\nText_to_analyze = \"Normal cardiac contours. Clear lung XXXX bilaterally. No pneumothorax or pleural effusion.\"\n\nprint(extract_clinically_relevant_findings(jsonIni, Text_to_analyze))"
    },
    {
        "text": "The heart is normal in size. Atherosclerotic calcifications of the aorta. The mediastinum is stable. There is again soft tissue density projected over the right mid chest, XXXX patient's known large breast mass. The appearance is grossly stable to decreased from prior study. The lateral projection is suboptimal as patient could not raise XXXX. There is no pleural effusion.",
        "res": "import re\nfrom typing import List, Dict\n\ndef extract_findings(jsonIni: List[str], TextToAnalyze: str) -> List[Dict]:\n    findings = []\n\n    for finding in jsonIni:\n        if not re.search(r'\\b' + re.escape(finding) + r'\\b', TextToAnalyze.lower()):\n            continue\n\n        if 'no' in finding.lower() or 'absent' in finding.lower():\n            finding_absent = True\n        else:\n            finding_absent = False\n\n        parts = finding.split()\n        description = \" \".join(parts[1:])\n\n        findings.append({\n            \"finding\": finding,\n            \"absent\": finding_absent,\n            \"text\": description\n        })\n\n    return findings"
    },
    {
        "text": "Lungs are clear bilaterally. There is no focal consolidation, pleural effusion, or pneumothoraces. Heart size is normal. Stable right paratracheal prominence, consistent with known calcified lymph node, seen on prior CT chest dated XXXX. XXXX are unremarkable.",
        "res": "import re\nfrom typing import List, Dict\n\ndef extract_clinically_relevant_findings(text: str, json_ini: List[str]) -> List[Dict]:\n    findings = []\n    \n    for finding in json_ini:\n        if not finding.startswith(\"clear\"):\n            # Define the pattern of clinically relevant findings and diseases.\n            pattern = r\"(\\w+)\\s*(aerospace|airway|artery|atherosclerotic|atelectasis|bronchiectasis|bronchovascular|calcified|cardiomegaly|edema|emphysema|enlarged heart|fibrotic scarring|granuloma|hernia|hyperinflated lungs|infiltrate|interstitial opacities|lymph|lumbar degenerative disc disease|mid lung|mild cardiomegaly|mildly enlarged heart|no focal infiltrate|normal appearance|patchy lung disease|pleural effusion|pulmonary edema|pulmonary edema due to ARDS|stable mediastinal contours|subsegmental atelectasis|tortuous thoracic aorta)\"\n            match = re.search(pattern, finding)\n            \n            if match:\n                finding_name = match.group(1).lower()\n                \n                # Extract the text that is relevant for the identification\n                text_relevant = re.search(rf\"([a-zA-Z]+)\\s+{finding_name}\", text)\n                \n                # Check if there is relevant information in the text, \n                # and whether it was identified as absent or present. If so, construct a new dictionary.\n                if text_relevant:\n                    finding_absent = \"false\" if text_relevant.group(1).lower() == 'absent' else \"true\"\n                    finding_dict = {\n                        \"finding\": finding_name,\n                        \"absent\": finding_absent,\n                        \"text\": text_relevant.group(0)\n                    }\n                    findings.append(findings_dict)\n\n    return findings"
    },
    {
        "text": "Broken of the 4XXXX XXXX XXXX, similar to the prior study. Stable multiple surgical clips in the left hilar area. Stable cardiomediastinal silhouette. Pulmonary vasculatures are within normal limits. No XXXX focal consolidation, pleural effusion or pneumothorax. Unremarkable bony structure.",
        "res": "import json\n\ndef analyze_text(jsonIni, Text_to_analyze):\n    # Extract clinically relevant findings and diseases\n    clinical_findings = [finding for finding in jsonIni if 'XXXX' not in finding]\n\n    # Identify clinically significant findings in the given text\n    analysis_results = []\n    for finding in clinical_findings:\n        absent = False\n        for key, value in ['finding', 'absent', 'text'].items():\n            if key in finding:\n                text_part = finding[key]\n                if value == \"true\":\n                    result = {\n                        'finding': f\"{key}: {text_part}\",\n                        'absent': json.loads(f\"'{Text_to_analyze}'\")['found'][f'{key}'],\n                        }\n                    analysis_results.append(result)\n            else:\n                continue\n        if absent:\n            text_part = finding[\"text\"]\n            result = {\n                'finding': f\"{finding['finding']}: {text_part}\",\n                'absent': json.loads(f\"'{Text_to_analyze}'\")['found'][f'{finding['finding']}'],\n                }\n            analysis_results.append(result)\n\n    return json.dumps([item for item in analysis_results if not (item['absent'] == False)])\n\nprint(analyze_text(['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', 'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', 'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity', 'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace', 'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', 'interstitial opacities', 'left mid lung granuloma', 'low lung volumes without focal consolidation', 'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart', 'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', 'normal heart size', 'patchy left lower lobe airspace disease', 'pleural effusion', 'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome', 'spine dextrocurvature', 'stable mediastinal contours', 'streaky bibasilar airspace opacities', 'subsegmental atelectasis', 'tortuous thoracic aorta', 'vagal nerve stimulator'], \"Broken of the 4XXXX XXXX XXXX, similar to the prior study. Stable multiple surgical clips in the left hilar area. Stable cardiomediastinal silhouette. Pulmonary vasculatures are within normal limits. No XXXX focal consolidation, pleural effusion or pneumothorax. Unremarkable bony structure.\"), '\"found\": {\"Right paratracheal stripe is denser\": true, \"XXXX opacities in the right mid lung\": false, ...}')"
    },
    {
        "text": "Cardiomediastinal silhouettes are within normal limits. Lungs are without focal consolidation, pneumothorax, or pleural effusion. Grossly unchanged appearance of calcified hilar lymph XXXX and scattered calcified granulomas. Stable degenerative changes in the spine.",
        "res": "import re\nimport json\n\ndef extract_findings(jsonIni, Text_to_analyze):\n    # Regular expression patterns for matching clinically significant findings and diseases\n    patterns = [\n        r'\\b(atelectasis|bronchiectasis|emphysema|bronchovascular crowding|diffuse right lower lobe airspace opacity|infiltrate in the right lower lobe|infiltrate in the right middle lobe|interstitial opacities|left mid lung granuloma|low lung volumes without focal consolidation|patchy left lower lobe airspace disease|pulmonary edema|spine dextrocurvature)\\b',  # Atelectasis, bronchiectasis, emphysema\n        r'\\b(bronchovascular crowding|mild cardiomegaly|mildly enlarged heart|hiatal hernia|hyperinflated lungs|increased retrosternal airspace|lumbar degenerative disc disease)\\b',  # Bronchovascular crowding, cardiomegaly, etc.\n        r'\\b(calcified granulomas/lymph|calcified left hilar lymph node|pulmonary edema due to acute respiratory distress syndrome)\\b',  # Calcified lymph nodes, pulmonary edema\n    ]\n\n    # List of findings and diseases extracted from the text\n    findings = []\n\n    for pattern in patterns:\n        matches = re.findall(pattern, Text_to_analyze)\n        if matches:\n            for match in matches:\n                finding = {\n                    \"finding\": match,\n                    \"absent\": False,\n                    \"text\": None  # Initialize \"text\" as None to handle cases where \"text\" is not found\n                }\n                findings.append(finding)\n\n    # Return an empty list if no clinically significant findings are extracted\n    if len(findings) == 0:\n        return []\n    else:\n        # Remove duplicates by creating a set and converting it back to a list\n        findings = list(set(findings))\n        # Sort the findings alphabetically\n        findings.sort(key=lambda x: x['finding'])\n        return json.dumps(findings, indent=4)\n\n# Example usage:\njsonIni = ['Right paratracheal stripe is denser', 'XXXX opacities in the right mid lung', 'aortic atherosclerotic vascular calcification', 'atelectasis', 'bronchiectasis', 'bronchovascular crowding', 'bullet in the posterior soft tissues of the left chest wall', 'calcified granulomas/lymph', 'calcified left hilar lymph node', 'clear lungs', 'diffuse right lower lobe airspace opacity', 'emphysema', 'fibrotic scarring', 'flattened diaphragm', 'hiatal hernia', 'hyperinflated lungs', 'increased retrosternal airspace', 'infiltrate in the right lower lobe', 'infiltrate in the right middle lobe', 'interstitial opacities', 'left mid lung granuloma', 'low lung volumes without focal consolidation', 'lumbar degenerative disc disease', 'mild cardiomegaly', 'mildly enlarged heart', 'no focal infiltrate', 'no pleural effusion', 'no suspicious pulmonary nodules', 'normal heart size', 'patchy left lower lobe airspace disease', 'pleural effusion', 'pulmonary edema', 'pulmonary edema due to acute respiratory distress syndrome', 'spine dextrocurvature', 'stable mediastinal contours', 'streaky bibasilar airspace opacities', 'subsegmental atelectasis', 'tortuous thoracic aorta', 'vagal nerve stimulator']  # List of findings and diseases can be appear.\nText_to_analyze = \"Cardiomediastinal silhouettes are within normal limits. Lungs are without focal consolidation, pneumothorax, or pleural effusion. Grossly unchanged appearance of calcified hilar lymph XXXX and scattered calcified granulomas. Stable degenerative changes in the spine.\"\n\nprint(extract_findings(jsonIni, Text_to_analyze))"
    }
]