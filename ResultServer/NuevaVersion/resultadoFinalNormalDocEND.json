[
    {
        "text": "No pneumothorax, pleural effusion or airspace consolidation. Heart size and pulmonary vasculature appear within normal limits. XXXX XXXX are intact.",
        "res": "import re\nimport json\n\ndef find_clinically_relevant_findings(jsonIni, Text_to_analyze):\n    # Define a list of excluded terms\n    excluded_terms = [\n        'unremarkable structures',\n        'normal appearance',\n        'no abnormalities detected',\n        'mild age-related changes',\n        'typical anatomy',\n        'absent findings'\n    ]\n\n    # Initialize an empty array to store the clinically relevant findings\n    relevant_findings = []\n\n    # Loop through each finding in jsonIni\n    for finding in jsonIni:\n        # Use regular expression to match finding and its text within Text_to_analyze\n        pattern = re.compile(f'({finding})', re.IGNORECASE)\n        match = pattern.search(Text_to_analyze)\n\n        if match:\n            finding_text = Text_to_analyze[Text_to_analyze.find(match.group()) + len(match.group()):]\n\n            # Check if the term is present in the text and not an excluded term\n            if match.group() not in excluded_terms and 'finding' in json.loads(json.dumps({'finding': finding})) and 'text' in json.loads(json.dumps({'text': Text_to_analyze})):\n                relevant_findings.append({\n                    \"finding\": json.loads(json.dumps({'finding': finding}))['finding'],\n                    \"absent\": False,\n                    \"text\": json.loads(json.dumps({'text': Text_to_analyze}))['text']\n                })\n            else:\n                # Check if the term is absent in the text\n                pattern_absent = re.compile('not ' + finding, re.IGNORECASE)\n                match_absent = pattern_absent.search(Text_to_analyze)\n\n                if match_absent and 'finding' not in json.loads(json.dumps({'text': Text_to_analyze})) and 'absent' not in json.loads(json.dumps({'finding': finding})) and finding.lower() != \"no findings\":\n                    relevant_findings.append({\n                        \"finding\": json.loads(json.dumps({'finding': finding}))['finding'],\n                        \"absent\": True,\n                        \"text\": json.loads(json.dumps({'text': Text_to_analyze}))['text']\n                    })\n        else:\n            # If the term is not found in the text, check if it's absent\n            pattern_absent = re.compile('not ' + finding, re.IGNORECASE)\n            match_absent = pattern_absent.search(Text_to_analyze)\n\n            if match_absent and 'finding' not in json.loads(json.dumps({'text': Text_to_analyze})) and 'absent' not in json.loads(json.dumps({'finding': finding})) and finding.lower() != \"no findings\":\n                relevant_findings.append({\n                    \"finding\": json.loads(json.dumps({'finding': finding}))['finding'],\n                    \"absent\": True,\n                    \"text\": json.loads(json.dumps({'text': Text_to_analyze}))['text']\n                })\n\n    return relevant_findings\n\njsonIni = ['8 mm right middle lobe pulmonary nodule', 'aortic atherosclerotic vascular calcification', \n           'atherosclerotic calcifications of the aorta', 'bilateral apical scarring', 'bilateral reticular opacities', \n           'bronchial obstruction', 'bronchiectasis', 'calcified granuloma left upper lobe', \n           'cardiomegaly', 'diffuse right lower lobe airspace opacity', 'elevation of right hemidiaphragm', \n           'fibrotic scarring', 'flattened diaphragm', 'hyperinflated lungs', 'increased retrosternal airspace', \n           'infiltrate in the lingula', 'infiltrate in the right middle lobe', 'infiltrate in the right upper lobe', \n           'interstitial opacities', 'large breast mass', 'left lower lobe air space opacity with consolidation atelectasis', \n           'left lower lobe of consolidation or atelectasis', 'low lung volumes with bronchovascular crowding', \n           'lumbar degenerative disc disease', 'mild thoracic aortic dilatation', 'minimal right middle lobe atelectasis', \n           'multiple opacities in the right mid lung, 3 subsegmental atelectasis', 'no pleural effusion', \n           'normal cardiac contour', 'patchy left lower lobe airspace disease', 'posttraumatic deformities of the left posterior ribs', \n           'pulmonary edema due to acute respiratory distress syndrome (ARDS)', 'right-sided pleural effusion', \n           'small left-sided effusion', 'soft tissue density projected over the right mid chest', 'spine dextrocurvature', \n           'subepicardial fibrosis']\n\nText_to_analyze = \"No pneumothorax, pleural effusion or airspace consolidation. Heart size and pulmonary vasculature appear within normal limits. XXXX XXXX are intact.\"\n\nresult = find_clinically_relevant_findings(jsonIni, Text_to_analyze)\nprint(result)"
    },
    {
        "text": "2 images. The cardiac silhouette is enlarged. Thoracic aortic atherosclerotic calcifications are present. There are finding status post sternotomy and CABG. XXXX atelectasis or scar is noted within the left midlung. There is blunting of the left costophrenic XXXX. No pneumothorax.",
        "res": "import json\nimport re\n\n# List of findings and diseases\njsonIni = ['8 mm right middle lobe pulmonary nodule', 'aortic atherosclerotic vascular calcification', \n           'atherosclerotic calcifications of the aorta', 'bilateral apical scarring', \n           'bilateral reticular opacities', 'bronchial obstruction', 'bronchiectasis',\n           'calcified granuloma left upper lobe', 'cardiomegaly', 'diffuse right lower lobe airspace opacity',\n           'elevation of right hemidiaphragm', 'fibrotic scarring', 'flattened diaphragm',\n           'hyperinflated lungs', 'increased retrosternal airspace', 'infiltrate in the lingula',\n           'infiltrate in the right middle lobe', 'infiltrate in the right upper lobe',\n           'interstitial opacities', 'large breast mass', \n           'left lower lobe air space opacity with consolidation atelectasis',\n           'left lower lobe of consolidation or atelectasis', \n           'low lung volumes with bronchovascular crowding',\n           'lumbar degenerative disc disease', 'mild thoracic aortic dilatation',\n           'minimal right middle lobe atelectasis', \n           'multiple opacities in the right mid lung, 3 subsegmental atelectasis',\n           'no pleural effusion', 'normal cardiac contour', \n           'patchy left lower lobe airspace disease', 'posttraumatic deformities of the left posterior ribs',\n           'pulmonary edema due to acute respiratory distress syndrome (ARDS)',\n           'right-sided pleural effusion', 'small left-sided effusion',\n           'soft tissue density projected over the right mid chest',\n           'spine dextrocurvature', \n           'subepicardial fibrosis']\n\n# Text to analyze\ntext_to_analyze = \"\"\"The cardiac silhouette is enlarged. Thoracic aortic atherosclerotic calcifications are present. There are finding status post sternotomy and CABG. XXXX atelectasis or scar is noted within the left midlung. There is blunting of the left costophrenic XXXX. No pneumothorax.\"\"\"\n\n# Pattern to match clinically significant findings\npattern = r'(aortic|bronchial|bronchiectasis|cardiomegaly|calcified granuloma|consolidation|diffuse|elevation|fibrotic|flattened|hyperinflated|increased retrosternal airspace|interstitial opacities|lumbar degenerative disc disease|mild thoracic aortic dilatation|minimal right middle lobe atelectasis|multiple opacities in the right mid lung|pulmonary edema due to acute respiratory distress syndrome|right-sided pleural effusion|small left-sided effusion|soft tissue density projected over the right mid chest|subepicardial fibrosis)'\n\n# Findings and diseases\nfindings = []\n\nfor finding in jsonIni:\n    if re.search(pattern, finding):\n        # Identify relevant text section from input text\n        pattern_relevant_text = r'\\b' + re.escape(finding) + r'\\s*(status post|post\\s*sternotomy|CABG|XXXX atelectasis|scar|blunting of the left costophrenic)?'\n        relevant_text = re.search(pattern_relevant_text, text_to_analyze)\n        \n        # If a match is found and not already listed\n        if relevant_text:\n            findings.append({\n                \"finding\": finding,\n                \"absent\": False,\n                \"text\": relevant_text.group()\n            })\n\n# Convert list to json array\njson_array = json.dumps(findings)\n\nprint(json_array)"
    },
    {
        "text": "2 images. Calcified granuloma left upper lobe. Heart size and pulmonary vascular engorgement appear within limits of normal. Mediastinal contour is unremarkable. No focal consolidation, pleural effusion, or pneumothorax identified. No convincing acute bony findings.",
        "res": "def analyze_text(jsonIni, Text_to_analyze):\n    # Define a list of clinically significant findings and diseases\n    clinically_significant_findings = [\n        \"calcified granuloma\",  # Add more here if needed\n        \"atherosclerotic calcifications\",\n        \"bronchiectasis\",\n        \"cardiomegaly\",\n        \"diffuse right lower lobe airspace opacity\",\n        \"elevation of right hemidiaphragm\",\n        \"fibrotic scarring\",\n        \"flattened diaphragm\",\n        \"hyperinflated lungs\",\n        \"increased retrosternal airspace\",\n        \"infiltrate in the lingula\",\n        \"left lower lobe air space opacity with consolidation atelectasis\",\n        \"low lung volumes with bronchovascular crowding\",\n        \"lumbar degenerative disc disease\",\n        \"mild thoracic aortic dilatation\",\n        \"minimal right middle lobe atelectasis\",\n        \"multiple opacities in the right mid lung, 3 subsegmental atelectasis\",\n        \"pulmonary edema due to acute respiratory distress syndrome (ARDS)\",\n        \"right-sided pleural effusion\"\n    ]\n\n    # Initialize an empty list to store the results\n    result = []\n\n    # Loop through each finding in the jsonIni list\n    for finding in jsonIni:\n        # Check if the finding is clinically significant\n        if finding.lower() in [clincally_significant_finding.lower() for clincally_significant_finding in clinically_significant_findings]:\n            # Get the text from Text_to_analyze that mentions the finding\n            text = \"\"\n            if ' Calcified granuloma left upper lobe' in Text_to_analyze:\n                text += \"Calcified granuloma left upper lobe\"\n            if 'right middle lobe pulmonary nodule' in Text_to_analyze:\n                text += \" right middle lobe pulmonary nodule\"\n            if 'Heart size and pulmonary vascular engorgement appear within limits of normal' in Text_to_analyze:\n                continue\n            if 'Mediastinal contour is unremarkable' in Text_to_analyze:\n                continue\n            if 'No focal consolidation, pleural effusion, or pneumothorax identified' in Text_to_analyze:\n                continue\n            if 'No convincing acute bony findings' in Text_to_analyze:\n                continue\n            # If the finding is found in the text, add it to the result list\n            if text:\n                result.append({\n                    \"finding\": finding,\n                    \"absent\": False,\n                    \"text\": text\n                })\n\n    # Return the result list\n    return result"
    },
    {
        "text": "Lungs are clear bilaterally. Cardiac and mediastinal silhouettes are normal. Pulmonary vasculature is normal. No pneumothorax or pleural effusion. No acute bony abnormality. There is a stable the electronic device any left anterior chest wall. There are advanced degenerative changes in the XXXX bilaterally. There is a 38 mm lucency in the right humeral head with geographic 1A margins.",
        "res": "import re\nimport json\n\ndef analyze_text(jsonIni, Text_to_analyze):\n    # Regular expression patterns to exclude general observations and anatomical descriptions\n    patterns = [\n        r\"unremarkable structures\",\n        r\"normal appearance\",\n        r\"no abnormalities detected\",\n        r\"Mild age-related changes\",\n        r\"typical anatomy\",\n        r\"Absent Findings\"\n    ]\n\n    # List of clinically significant findings and diseases to look for in the text\n    findings = {\n        \"atherosclerotic calcifications\": True,\n        \"bronchiectasis\": True,\n        \"calcified granuloma\": True,\n        \"cardiomegaly\": True,\n        \"diffuse right lower lobe airspace opacity\": True,\n        \"elevation of right hemidiaphragm\": True,\n        \"fibrotic scarring\": True,\n        \"flattened diaphragm\": True,\n        \"hyperinflated lungs\": True,\n        \"increased retrosternal airspace\": True,\n        \"interstitial opacities\": True,\n        \"lumbar degenerative disc disease\": True,\n        \"pulmonary edema due to ARDS\": True,\n        \"right-sided pleural effusion\": True,\n        \"soft tissue density projected over the right mid chest\": True\n    }\n\n    # Initialize an empty list to store clinically significant findings and diseases\n    results = []\n\n    # Split the text into sections for easier analysis\n    sections = re.split(r\"[.!?]\\s*\", Text_to_analyze)\n\n    # Analyze each section of the text\n    for i in range(len(sections)):\n        # Check if the current section contains any clinically significant findings or diseases\n        for finding, expected in findings.items():\n            pattern = r\"\\b\" + re.escape(finding) + r\"\\b\"\n            match = re.search(pattern, sections[i], re.IGNORECASE)\n            if match and sections[i].strip() not in patterns:\n                # If a match is found, add it to the results list\n                result = {\n                    \"finding\": finding,\n                    \"absent\": False,\n                    \"text\": f\"{sections[i-1]}\\n{sections[i]}\"\n                }\n                results.append(result)\n\n    return json.dumps(results)\n\n# Example usage:\njsonIni = ['8 mm right middle lobe pulmonary nodule', 'aortic atherosclerotic vascular calcification']\nText_to_analyze = \"Lungs are clear bilaterally. Cardiac and mediastinal silhouettes are normal.\"\nprint(analyze_text(jsonIni, Text_to_analyze))"
    },
    {
        "text": "Normal heart size and mediastinal contours. No focal airspace consolidation. Tracheostomy tip approximately 5 cm above the carina. No pleural effusion or pneumothorax.",
        "res": "from typing import List\n\ndef extract_findings(jsonIni: List[str], Text_to_analyze: str) -> List[dict]:\n    findings = [\n        \"aortic atherosclerotic vascular calcification\", \n        \"atherosclerotic calcifications of the aorta\",\n        \"bilateral apical scarring\",\n        \"bilateral reticular opacities\",\n        \"bronchial obstruction\",\n        \"bronchiectasis\",\n        \"calcified granuloma left upper lobe\",\n        \"cardiomegaly\",\n        \"diffuse right lower lobe airspace opacity\",\n        \"elevation of right hemidiaphragm\",\n        \"fibrotic scarring\",\n        \"flattened diaphragm\",\n        \"hyperinflated lungs\",\n        \"increased retrosternal airspace\",\n        \"infiltrate in the lingula\",\n        \"infiltrate in the right middle lobe\",\n        \"infiltrate in the right upper lobe\",\n        \"interstitial opacities\",\n        \"left lower lobe air space opacity with consolidation atelectasis\",\n        \"left lower lobe of consolidation or atelectasis\",\n        \"low lung volumes with bronchovascular crowding\",\n        \"lumbar degenerative disc disease\",\n        \"mild thoracic aortic dilatation\", \n        \"minimal right middle lobe atelectasis\",\n        \"multiple opacities in the right mid lung, 3 subsegmental atelectasis\",\n        \"no pleural effusion\",\n        \"normal cardiac contour\",\n        \"patchy left lower lobe airspace disease\",\n        \"posttraumatic deformities of the left posterior ribs\",\n        \"pulmonary edema due to acute respiratory distress syndrome (ARDS)\",\n        \"right-sided pleural effusion\",\n        \"small left-sided effusion\",\n        \"soft tissue density projected over the right mid chest\",\n        \"spine dextrocurvature\",\n        \"subepicardial fibrosis\"\n    ]\n\n    findings_absent = [\"absent findings\", \"normal appearance\"]\n\n    output = []\n    for finding in jsonIni:\n        if finding.lower() not in findings and finding.lower() not in findings_absent:\n            continue\n\n        text_relevant = \"no pleural effusion or pneumothorax\"\n        found_text = \"\"\n        for word in Text_to_analyze.split():\n            if word.lower() == finding.lower():\n                found_text += word + \" \"\n            elif finding.lower() in word.lower():\n                found_text += word\n            elif text_relevant in word.lower():\n                text_relevant += word\n        if found_text.strip(): \n            output.append(\n                {\n                    'finding': finding,\n                    'absent': False,\n                    'text': found_text\n                }\n            )\n\n    return output"
    },
    {
        "text": "Clear lungs. Heart and pulmonary XXXX appear normal. Pleural spaces are clear. Mediastinal contours are normal.",
        "res": "import re\nfrom typing import List\n\ndef analyze_text(jsonIni: List[str], Text: str) -> List[dict]:\n    findings = []\n    \n    # Regular expression to match clinically relevant terms\n    pattern = r'^(?:(?:atherosclerotic|calcified|pulmonary|cardiovascular|lung|bronchial|pleural|mediastinal)\\s+calcinosis|congestive heart failure|acute respiratory distress syndrome|ARDS|fibrosis|infiltrates|opacities|consolidation|atelectasis|edema|effusion|space|volume|density)\\s+of\\s+the\\sother|of\\s+pulmonary|left\\s+middle|right\\s+middle|lower\\s+lobe|upper\\s+lobe|mid\\s+lung|mid\\s+breast|breast|lumbar|degenerative|disc|dilatation|thoracic)\\s+\\w+|(\\w+ing|consolidating|fibrinogen|leukocyte|elevation|depression|atrophy|shrinkage|enlargement|hypertrophy)(?!\\S))(?!\\b)'\n\n    for finding in jsonIni:\n        if re.search(pattern, finding):\n            # Find the corresponding text\n            text = Text\n            # Check if term is identified as absent or not\n            match = f'{finding.replace(\"of the\", \"absent\")}'\n            if match in Text:\n                findings.append({\n                    'finding': match,\n                    'absent': True,\n                    'text': text\n                })\n            else:\n                findings.append({\n                    'finding': match,\n                    'absent': False,\n                    'text': text\n                })\n\n    return findings"
    },
    {
        "text": "Heart size is normal. No focal airspace disease. Emphysema. Bibasilar pleural scarring. No pneumothorax or effusion.",
        "res": "Here is a Python function that analyzes the input text and extracts relevant findings and diseases:\n```python\nimport re\n\ndef extract_findings(json_ini):\n    # List of clinically significant words\n    clinical_words = [\n        'nodule', 'calcification', 'atherosclerosis', 'scarring', 'opacity', \n        'consolidation', 'atelectasis', 'pleural effusion', 'pulmonary edema', \n        'emphysema', 'pleurisy', 'fibrosis', 'infiltrate'\n    ]\n\n    # Dictionary to store findings\n    findings = []\n\n    # Iterate over each finding in the json_ini list\n    for finding in json_ini:\n        # Check if the finding is clinically significant\n        if any(word in finding.lower() for word in clinical_words):\n            # Extract relevant section from text\n            match = re.search(r'Heart size is (.*)', Text_to_analyze, re.IGNORECASE)\n            if match:\n                finding['finding'] = 'Heart size'\n                finding['absent'] = 'true' if 'normal' in match.group(1) else 'false'\n                findings.append(findings)\n\n            # Extract relevant section from text\n            match = re.search(r'emphysema', Text_to_analyze, re.IGNORECASE)\n            if match:\n                finding['finding'] = 'emphysema'\n                finding['absent'] = 'true' if not match.group() else 'false'\n                findings.append(findings)\n\n            # Extract relevant section from text\n            match = re.search(r'bibilasilar pleural scarring', Text_to_analyze, re.IGNORECASE)\n            if match:\n                finding['finding'] = 'bibilasilar pleural scarring'\n                finding['absent'] = 'true' if not match.group() else 'false'\n                findings.append(findings)\n\n        # If no clinically significant finding is found\n    return []\n\n# Test the function with example inputs\nText_to_analyze = \"Heart size is normal. No focal airspace disease. Emphysema. Bibasilar pleural scarring. No pneumothorax or effusion.\"\njson_ini = ['8 mm right middle lobe pulmonary nodule', 'aortic atherosclerotic vascular calcification', \n            'atherosclerotic calcifications of the aorta', 'bilateral apical scarring', \n            'bilateral reticular opacities', 'bronchial obstruction', \n            'bronchiectasis', 'calcified granuloma left upper lobe', \n            'cardiomegaly', 'diffuse right lower lobe airspace opacity', \n            'elevation of right hemidiaphragm', 'fibrotic scarring', \n            'flattened diaphragm', 'hyperinflated lungs', \n            'increased retrosternal airspace', 'infiltrate in the lingula', \n            'infiltrate in the right middle lobe', 'infiltrate in the right upper lobe', \n            'interstitial opacities', 'large breast mass', \n            'left lower lobe air space opacity with consolidation atelectasis', \n            'left lower lobe of consolidation or atelectasis', \n            'low lung volumes with bronchovascular crowding', \n            'lumbar degenerative disc disease', \n            'mild thoracic aortic dilatation', \n            'minimal right middle lobe atelectasis', \n            'multiple opacities in the right mid lung, 3 subsegmental atelectasis', \n            'no pleural effusion', \n            'normal cardiac contour', \n            'patchy left lower lobe airspace disease', \n            'posttraumatic deformities of the left posterior ribs', \n            'pulmonary edema due to acute respiratory distress syndrome (ARDS)', \n            'right-sided pleural effusion', 'small left-sided effusion', \n            'soft tissue density projected over the right mid chest', \n            'spine dextrocurvature', \n            'subepicardial fibrosis']\n\nprint(json.dumps(extract_findings(json_ini), indent=4))\n```\nThis code defines a function `extract_findings` that takes a list of findings as input and returns a JSON array with clinically significant findings. The function uses regular expressions to extract relevant sections from the text and checks if each finding is clinically significant by comparing it against a list of clinically significant words.\n\nThe test case provided includes both clinically significant findings (e.g., emphysema, bibilasilar pleural scarring) and non-significant findings (e.g., normal cardiac contour). The output will be a JSON array with the relevant findings and their absence status."
    },
    {
        "text": "The heart is normal in size. Atherosclerotic calcifications of the aorta. The mediastinum is stable. There is again soft tissue density projected over the right mid chest, XXXX patient's known large breast mass. The appearance is grossly stable to decreased from prior study. The lateral projection is suboptimal as patient could not raise XXXX. There is no pleural effusion.",
        "res": "import json\n\ndef extract_relevant_findings(jsonIni, Text_to_analyze):\n    # Filter out clinically relevant findings and diseases\n    relevant_findings = [finding for finding in jsonIni if finding not in [\"Unremarkable structures\", \"Normal appearance\", \"No abnormalities detected\", \"Mild age-related changes\", \"Typical anatomy\", \"Absent Findings\"]]\n    \n    # Initialize an empty list to store the extracted findings\n    extracted_findings = []\n    \n    # Loop through each relevant finding\n    for finding in relevant_findings:\n        # Split the finding into word and number (if present)\n        parts = finding.split()\n        \n        # If there's a number, it might indicate a quantifiable finding or disease\n        if len(parts) > 1 and parts[0].isdigit():\n            quantity = int(parts[0])\n            word = ' '.join(parts[1:])\n            \n            # Check for the presence of certain words in the text to analyze\n            for absente in [\"absent\", \"no\"]:\n                if absente in Text_to_analyze:\n                    extracted_findings.append({\n                        'finding': f\"{word} with {quantity}\",\n                        'absent': True,\n                        'text': find_text(Text_to_analyze, absente)\n                    })\n                else:\n                    extracted_findings.append({\n                        'finding': word,\n                        'absent': False,\n                        'text': find_text(Text_to_analyze, \"\")\n                    })\n        # If there's no number, it's likely a description of a disease or condition\n        else:\n            for absente in [\"absent\", \"no\"]:\n                if absente in Text_to_analyze:\n                    extracted_findings.append({\n                        'finding': finding,\n                        'absent': True,\n                        'text': find_text(Text_to_analyze, absente)\n                    })\n                else:\n                    extracted_findings.append({\n                        'finding': finding,\n                        'absent': False,\n                        'text': find_text(Text_to_analyze, \"\")\n                    })\n\n    return extracted_findings\n\ndef find_text(text, word):\n    for line in text.split('\\n'):\n        if word.lower() in line.lower():\n            start = line.find(word)\n            end = line.find(' ', start) + 1\n            return f\"'{line[start:end]}'\"\n    return \"\"\n\n# Test the function with sample data\njsonIni = [\"8 mm right middle lobe pulmonary nodule\", \"aortic atherosclerotic vascular calcification\", \"atherosclerotic calcifications of the aorta\", \n           \"bilateral apical scarring\", \"bilateral reticular opacities\", \"bronchial obstruction\", \"bronchiectasis\", \"calcified granuloma left upper lobe\",\n           \"cardiomegaly\", \"diffuse right lower lobe airspace opacity\", \"elevation of right hemidiaphragm\", \n           \"fibrotic scarring\", \"flattened diaphragm\", \"hyperinflated lungs\", \"increased retrosternal airspace\", \n           \"infiltrate in the lingula\", \"infiltrate in the right middle lobe\", \"infiltrate in the right upper lobe\",\n           \"interstitial opacities\", \"large breast mass\", \"left lower lobe air space opacity with consolidation atelectasis\",\n           \"left lower lobe of consolidation or atelectasis\", \"low lung volumes with bronchovascular crowding\", \n           \"lumbar degenerative disc disease\", 'mild thoracic aortic dilatation', 'minimal right middle lobe atelectasis',\n           \"multiple opacities in the right mid lung, 3 subsegmental atelectasis\", \"no pleural effusion\",\n           \"normal cardiac contour\", \"patchy left lower lobe airspace disease\", \"posttraumatic deformities of the left posterior ribs\",\n           'pulmonary edema due to acute respiratory distress syndrome (ARDS)', \n           \"right-sided pleural effusion\", \"small left-sided effusion\", \"soft tissue density projected over the right mid chest\",\n           \"spine dextrocurvature\", \"subepicardial fibrosis\"]\n\ntext_to_analyze = \"\"\"The heart is normal in size. Atherosclerotic calcifications of the aorta. The mediastinum is stable. There is again soft tissue density projected over the right mid chest, XXXX patient's known large breast mass. \n                    The appearance is grossly stable to decreased from prior study. The lateral projection is suboptimal as patient could not raise XXXX. There is no pleural effusion.\"\"\"\n\nprint(json.dumps(extract_relevant_findings(jsonIni, text_to_analyze), indent=4))"
    },
    {
        "text": "The lungs are clear. There is hyperinflation. Calcification is seen over the anterior mediastinum XXXX a calcified lymph node at is not identified on the PA projection. The heart is normal. Arthritic changes the spine are seen.",
        "res": "import re\nfrom typing import List, Dict\n\ndef analyze_text(jsonIni: List[str], TextToAnalyze: str) -> List[Dict]:\n    # Define a list of general observations and anatomical descriptions to exclude\n    exclude_list = [\n        r'Unremarkable structures',  # Normal appearance\n        r'Normal.*?appearance',\n        r'No abnormalities detected',  # Absent Findings\n        r'Mild age-related changes',  # General observation\n        r'Typical anatomy',  # Anatomical description\n    ]\n\n    result = []\n    for finding in jsonIni:\n        # Check if the finding is present or absent in the text\n        finding_absent = re.search(r'\\b' + re.escape(findings) + r'\\b(?:(?![' + \\\n                                    '|'.join(exclude_list) + ']).)*?(?<!' + re.escape(\n                                findings) + ')', TextToAnalyze, re.IGNORECASE), None)\n        finding_present = re.search(r'\\b' + re.escape(findings) + r'\\b(?!(?:' +\n                                     '|'.join(exclude_list) + ').)*?(?!' + re.escape(\n                                findings) + ')$', TextToAnalyze, re.IGNORECASE)\n\n        # If the finding is present, add it to the result with its relevant text\n        if finding_present:\n            result.append({\n                \"finding\": finding,\n                \"absent\": str(not finding_absent),\n                \"text\": finding_absent.group() if finding_absent else \"\",\n            })\n\n    return result"
    },
    {
        "text": "Heart size and mediastinal contour are within normal limits. There is no focal airspace consolidation or suspicious pulmonary opacity. No pneumothorax or large pleural effusion. Mild degenerative change of the thoracic spine.",
        "res": "### Analyzing Clinically Relevant Findings and Diseases in Medical Text\n\nGiven the `jsonIni` list of potential findings and diseases, and the `Text to analyze`, we will identify clinically relevant findings and diseases.\n\n#### Input:\n```json\njsonIni = [\n    '8 mm right middle lobe pulmonary nodule', \n    'aortic atherosclerotic vascular calcification',\n    'atherosclerotic calcifications of the aorta',\n    'bilateral apical scarring', \n    'bilateral reticular opacities', \n    'bronchial obstruction', \n    'bronchiectasis', \n    'calcified granuloma left upper lobe',\n    'cardiomegaly',\n    'diffuse right lower lobe airspace opacity',\n    'elevation of right hemidiaphragm',\n    'fibrotic scarring',\n    'flattened diaphragm',\n    'hyperinflated lungs',\n    'increased retrosternal airspace', \n    'infiltrate in the lingula',\n    'infiltrate in the right middle lobe',\n    'infiltrate in the right upper lobe',\n    'interstitial opacities', \n    'large breast mass',\n    'left lower lobe air space opacity with consolidation atelectasis',\n    'left lower lobe of consolidation or atelectasis',\n    'low lung volumes with bronchovascular crowding',\n    'lumbar degenerative disc disease',\n    'mild thoracic aortic dilatation', \n    'minimal right middle lobe atelectasis',\n    'multiple opacities in the right mid lung, 3 subsegmental atelectasis',\n    'no pleural effusion',\n    'normal cardiac contour', \n    'patchy left lower lobe airspace disease', \n    'posttraumatic deformities of the left posterior ribs',\n    'pulmonary edema due to acute respiratory distress syndrome (ARDS)',\n    'right-sided pleural effusion',\n    'small left-sided effusion',\n    'soft tissue density projected over the right mid chest',\n    'spine dextrocurvature', \n    'subepicardial fibrosis'\n]\n```\n\n```python\nimport json\n\n# List of potential findings and diseases\njsonIni = [\n    # Add more findings as needed...\n]\n\n# Text to analyze\nText_to_analyze = \"Heart size and mediastinal contour are within normal limits. There is no focal airspace consolidation or suspicious pulmonary opacity. No pneumothorax or large pleural effusion. Mild degenerative change of the thoracic spine.\"\n\ndef extract_findings(text, findings):\n    \"\"\"\n    Extract clinically relevant findings and diseases from a medical text.\n\n    Parameters:\n        text (str): The input text to analyze.\n        findings (list): A list of potential findings and diseases.\n\n    Returns:\n        list: A JSON array containing clinically significant findings and diseases identified in the text.\n    \"\"\"\n    # Initialize an empty list to store the extracted findings\n    extracted_findings = []\n\n    # Iterate over each finding in the input list\n    for finding in findings:\n        # Check if the finding is present in the text\n        if finding.lower() in Text_to_analyze.lower():\n            # Extract the relevant section of the text\n            start_index = Text_to_analyze.lower().find(finding.lower()) + len(finding)\n            end_index = Text_to_analyze.lower().find('.', start_index) if '.' in Text_to_analyze else Text_to_analyze.lower().find(' ', start_index)\n\n            # Create a dictionary for the extracted finding\n            finding_dict = {\n                \"finding\": finding,\n                \"absent\": False,\n                \"text\": Text_to_analyze[start_index:end_index]\n            }\n\n            # Add the extracted finding to the list\n            extracted_findings.append(finding_dict)\n\n    # Return the list of extracted findings as a JSON array\n    return json.dumps([finding for finding in extracted_findings if finding[\"absent\"] == \"False\"])\n\n# Extract clinically relevant findings and diseases from the text\nextracted_findings = extract_findings(Text_to_analyze, jsonIni)\n\nprint(extracted_findings)\n```\n\nNote that this code assumes that the input `jsonIni` list contains a comprehensive set of potential findings and diseases. You may need to add or modify findings as needed based on your specific use case.\n\nAlso, please note that this is a simplified example and you might want to adjust it according to your requirements."
    }
]